name: minitwit workflow

on:
  [push]
  # release:
  #   types:
  #     - created

env:
  WEB: docker.pkg.github.com/notaduck/devops_itu/web
  PROXY: docker.pkg.github.com/notaduck/devops_itu/proxy
  API: docker.pkg.github.com/notaduck/devops_itu/api

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v1
      - name: Add environment variables to .{service}.env
        run: |
          touch .api.env
          echo DEBUG=0 >> .api.env
          echo DB_NAME= ${{ secrets.DB_NAME }} >> .api.env
          echo DB_USER= ${{ secrets.DB_USER }} >> .api.env
          echo DB_PASSWORD= ${{ secrets.DB_PASSWORD }} >> .api.env
          echo DB_HOST= ${{ secrets.DB_HOST }} >> .api.env
          echo ALLOWED_HOSTS= ${{ secrets.ALLOWERD_HOSTS }} >> .api.env
          echo MINITWIT_SECRET_KEY= ${{ secrets.MINITWIT_SECRET_KEY }} >> .api.env

          touch .web.env
          echo DEBUG=0 >> .web.env
          echo DB_NAME= ${{ secrets.DB_NAME }} >> .web.env
          echo DB_USER= ${{ secrets.DB_USER }} >> .web.env
          echo DB_PASSWORD= ${{ secrets.DB_PASSWORD }} >> .web.env
          echo DB_HOST= ${{ secrets.DB_HOST }} >> .web.env
          echo ALLOWED_HOSTS= ${{ secrets.ALLOWERD_HOSTS }} >> .web.env
          echo MINITWIT_SECRET_KEY= ${{ secrets.MINITWIT_SECRET_KEY }} >> .web.env

          touch .db.env
          echo PASSWORD= ${{ secrets.PASSWORD }} >> .db.env
          echo USER= ${{ secrets.USER }} >> .db.env
          echo DATABASE= ${{ secrets.DATABASE }} >> .db.env

      #- name: Set environment variables
      #  run: |
      #    echo ::set-env name=WEB::${{ env.WEB }}
      #    echo ::set-env name=PROXY::${{ env.PROXY }}
      #    echo ::set-env name=DB::${{ env.DB }}
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull images
        run: |
          docker pull ${{ env.WEB }} || true
          dockset/////er pull ${{ env.API }} || true
          docker pull ${{ env.PROXY }} || true
      - name: Build images
        run: |
          docker-compose -f docker-compose-deploy.yml build
      - name: Push images
        run: |
          docker push ${{ env.WEB }}
          docker push ${{ env.API }}
          docker push ${{ env.PROXY }}
          # docker push ${{ env.DB }}

  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout master
        uses: actions/checkout@v1
      - name: Add environment variables to .{service}.env
        run: |
          echo DEBUG=0 >> .api.env
          echo DB_NAME= ${{ secrets.DB_NAME }} >> .api.env
          echo DB_USER= ${{ secrets.DB_USER }} >> .api.env
          echo DB_PASSWORD= ${{ secrets.DB_PASSWORD }} >> .api.env
          echo DB_HOST= ${{ secrets.DB_HOST }} >> .api.env
          echo ALLOWED_HOSTS= ${{ secrets.ALLOWERD_HOSTS }} >> .api.env
          echo MINITWIT_SECRET_KEY= ${{ secrets.MINITWIT_SECRET_KEY }} >> .api.env

          echo DEBUG=0 >> .web.env
          echo DB_NAME= ${{ secrets.DB_NAME }} >> .web.env
          echo DB_USER= ${{ secrets.DB_USER }} >> .web.env
          echo DB_PASSWORD= ${{ secrets.DB_PASSWORD }} >> .web.env
          echo DB_HOST= ${{ secrets.DB_HOST }} >> .web.env
          echo ALLOWED_HOSTS= ${{ secrets.ALLOWERD_HOSTS }} >> .web.env
          echo MINITWIT_SECRET_KEY= ${{ secrets.MINITWIT_SECRET_KEY }} >> .web.env

          echo PASSWORD= ${{ secrets.PASSWORD }} >> .db.env
          echo USER= ${{ secrets.USER }} >> .db.env
          echo DATABASE= ${{ secrets.DATABASE }} >> .db.env
      - name: Build and deploy images on DigitalOcean
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp  -o StrictHostKeyChecking=no -r ./.env ./docker-compose.prod.yml root@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }}:/app
          ssh -o StrictHostKeyChecking=no root@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }} << 'ENDSSH'
            cd /app
            source .env
            docker login docker.pkg.github.com -u notaduck -p ${{ secrets.GUSER_SECRET }} 
            docker pull $WEB
            docker pull $API
            docker pull $PROXY
            docker-compose -f docker-compose-deploy.yml up -d
          ENDSSH

